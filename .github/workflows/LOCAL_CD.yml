name: Deploy sandol server to SSH server

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
    - name: Checkout with submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
        ref: ${{ github.ref_name }}

    - name: Merge .env.dev > .env.amqp > .env.example into .env
      shell: bash
      run: |
        find . -type d | while read dir; do
          combined_env="$dir/.env"
          > "$combined_env"

          declare -A env_map

          for src in ".env.dev" ".env.amqp" ".env.example"; do
            src_path="$dir/$src"
            if [ -f "$src_path" ]; then
              while IFS= read -r line; do
                [[ "$line" =~ ^\s*$ || "$line" =~ ^\s*# ]] && continue
                key=$(echo "$line" | cut -d= -f1)
                value=$(echo "$line" | cut -d= -f2-)
                env_map["$key"]="$value"
              done < "$src_path"
            fi
          done

          for key in "${!env_map[@]}"; do
            echo "$key=${env_map[$key]}" >> "$combined_env"
          done
        done

    - name: Build all Docker images and save as tar
      shell: bash
      run: |
        set -euxo pipefail
        TAG=${{ github.sha }}
        echo "Git SHA TAG: $TAG"
        find . -type f -name 'Dockerfile' | while read dockerfile; do
          DIR=$(dirname "$dockerfile")
          NAME=$(basename "$DIR")
          IMAGE="sandol-${NAME}:${TAG}"
          TAR_PATH="${DIR}/docker_image_${NAME}_${TAG}.tar"
          docker build --progress=plain -t "$IMAGE" "$DIR"
          docker save -o "$TAR_PATH" "$IMAGE"
        done

    - name: Remove .git directory
      run: rm -rf .git

    - name: Validate docker-compose.yml
      run: docker compose config

    - name: Delete all .env* files before upload
      shell: bash
      run: |
        find . -type f -name ".env*" -delete

    - name: Upload SSH private key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Delete .tar files on remote and copy repo
      run: |
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST \
          "find ~/tuk_sandol_team -type f -name 'docker_image_*.tar' -delete"
        scp -P $SSH_PORT -r ./* $SSH_USER@$SSH_HOST:~/tuk_sandol_team

    - name: Run Docker Compose on remote server
      run: |
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "
          cd ~/tuk_sandol_team &&
          if grep -q '^TAG=' .env 2>/dev/null; then
            sed -i 's/^TAG=.*/TAG=${{ github.sha }}/' .env
          else
            echo 'TAG=${{ github.sha }}' >> .env
          fi &&
          find . -type f -name 'docker_image_*.tar' | while read tarfile; do
            docker load -i \"\$tarfile\"
          done &&
          sudo docker compose up -d
        "

  verify-and-cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
    - name: Upload SSH private key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Verify all Docker Compose services are running
      run: |
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "
          cd ~/tuk_sandol_team &&
          total=\$(docker compose config --services | wc -l) &&
          running=\$(docker compose ps --services --filter status=running | wc -l) &&
          if [ \"\$total\" -eq \"\$running\" ]; then
            echo '✅ All services are running.'
          else
            echo '❌ Some services failed to start.'
            docker compose ps
            exit 1
          fi
        "

    - name: Prune unused Docker images and volumes
      if: success()
      run: |
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST "
          docker system prune -af --volumes
        "

services:
  gateway:
    build: ./sandol-gateway/gateway
    ports:
      - "8010:80"
    environment:
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      user-service:
        condition: service_healthy
      meal-service:
        condition: service_healthy
      kakao-bot-service:
        condition: service_healthy
      static-info-service:
        condition: service_healthy
      classroom-timetable-service:
        condition: service_healthy
      notice-notification:
        condition: service_healthy
    volumes:
      - ./sandol-gateway/gateway:/etc/nginx/conf.d
      - ./sandol-gateway/gateway/lua:/etc/nginx/lua
      - user_static:/usr/share/nginx/static/user
    command: [ "/usr/local/openresty/bin/openresty", "-g", "env SECRET_KEY; daemon off;" ]
    networks:
      - sandol_network
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  user-service:
    container_name: sandol_user_service
    build: ./sandol_user_service
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./sandol_user_service:/app
      - user_static:/app/static
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/user/health" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  meal-service:
    container_name: sandol_meal_service
    build: ./sandol_meal_service
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./sandol_meal_service:/app
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/meal/health" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  kakao-bot-service:
    container_name: sandol_kakao_bot_service
    build: ./sandol_kakao_bot_service
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./sandol_kakao_bot_service:/app
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/kakao-bot/health" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  static-info-service:
    container_name: sandol_static_info_service
    build: ./sandol-static-info-service
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./sandol-static-info-service:/app
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/static-info/health" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  classroom-timetable-service:
    container_name: sandol_classroom_timetable_service
    build: ./sandol_classroom_timetable_service
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "wget", "-O -", "--tries=1", "http://localhost:80/classroom-timetable/health" ]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  notice-notification:
    container_name: sandol-notice-notification
    build:
      context: ./sandol_notice_notification
      dockerfile: Dockerfile
    restart: always

    env_file:
      - ./sandol_notice_notification/.env.dev

    networks:
      - sandol_network

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/notice-notification/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    depends_on:
      amqp:
        condition: service_healthy
      notice-notification-db:
        condition: service_healthy

    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  notice-notification-db:
    container_name: sandol-notice-notification-db
    image: postgres:15
    restart: always
    env_file:
      - ./sandol_notice_notification/.env.dev
    volumes:
      - ./sandol_notice_notification/db_data:/var/lib/postgresql/data
    networks:
      - sandol_network

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U root" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  amqp:
    container_name: amqp
    image: rabbitmq:3-management
    networks:
      - sandol_network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "7"

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
    - ./sandol-log-manager/config/loki/loki-config.yaml:/etc/loki/local-config.yaml
    - ./sandol-log-manager/data:/var/lib/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
    - sandol_network
    restart: always

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v3.3.0}
    container_name: prometheus
    volumes:
      - ./sandol-log-manager/config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-remote-write-receiver"
    ports:
      - "9090:9090"
    networks:
      - sandol_network
    restart: always

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./sandol-log-manager/config/alloy/config.alloy:/etc/alloy/config.alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 /etc/alloy/config.alloy
    ports:
      - 12345:12345
      - 4317:4317
      - 4318:4318
    depends_on:
      - loki
    networks:
    - sandol_network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./sandol-log-manager/config/grafana/provisioning:/etc/grafana/provisioning
    networks:
    - sandol_network
    command:
      - " --remove-orphans"
    restart: always
    environment:
      - GF_LOG_LEVEL=warn
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true


volumes:
  user_static: {}
  grafana_data: {}

networks:
  sandol_network:
    driver: bridge
